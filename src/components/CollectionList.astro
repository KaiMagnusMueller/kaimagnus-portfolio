---
import type { CollectionEntry } from 'astro:content';

export interface Props {
	title?: string;
	entries: CollectionEntry<'projects' | 'articles' | 'work'>[];
	ariaDetails?: string;
}

const { title, entries, ariaDetails } = Astro.props;

const sortedEntries = entries.sort((a, b) => b.data.datePublished.getTime() - a.data.datePublished.getTime());

function allSameValue(keyName: string, arr: any[]): boolean {
	const values = arr.map((obj) => obj[keyName]);
	return new Set(values).size === 1;
}

const shouldLinkTitle = title && allSameValue('collection', sortedEntries);
const titleLink = shouldLinkTitle ? `/${sortedEntries[0].collection}` : null;
---

{
	sortedEntries.length > 0 && (
		<div class="post-list text-regular">
			{title && <h2 class="color-text-low-contrast">{titleLink ? <a href={titleLink}>{title}</a> : title}</h2>}

			<slot />

			<ul>
				{sortedEntries.map((entry) => (
					<li>
						<a
							class={`text-regular position--relative ${entry.data.highlight ? 'highlight' : ''}`}
							href={`/${entry.collection}/${entry.slug}`}
							aria-label={entry.data.description}>
							{entry.data.title}
						</a>
					</li>
				))}
			</ul>
		</div>
	)
}

<style lang="scss">
	@import '../styles/_vars.scss';

	.post-list {
		margin-block-start: 2rem;
		margin-block-end: 4rem;
		// line-height: 22px;
		// line-height: 1.6;
		// If font is SF Pro
	}

	ul {
		margin: 0;
		padding: 0;
		list-style: none;
	}

	h2 {
		margin: 3px 0;

		a {
			text-decoration: revert;
		}
	}

	li,
	h2 {
		margin: 0.3rem 0;
	}

	span:hover {
	}

	a {
		display: inline-block;
		text-decoration: none;

		&:hover {
			text-decoration: revert;
		}
	}

	@media (pointer: coarse) {
		// 	li,
		// 	h2 {
		// 		line-height: 1.6;
		// 	}

		a {
			padding-block: 0.125rem;
			// line-height: 1.6;
		}
	}

	@media (max-width: $screen-md) {
		.post-list {
			margin-bottom: 3rem;
		}
	}
</style>
