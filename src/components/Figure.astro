---
import { Picture } from '@astrojs/image/components';

export interface Props {
	src?: string;
	alt?: string;
	aspectRatio?: `${number}:${number}`;
	widths?: string;
	sizes?: string;
	type?: 'picture' | 'video' | 'useCase';
	fullWidth?: boolean;
}

const {
	src = 'https://slipsum.com/wp-content/themes/15zine/img/sam.png',
	alt = '',
	aspectRatio = '16:10',
	type = 'picture',
	fullWidth = false,
} = Astro.props;

let _src = '';

if (type === 'video') {
	_src = import.meta.env.PUBLIC_APACHE_URL + src;
}

let options = {
	rootMargin: '0px',
	threshold: 1.0,
};
---

<script>
	const videos = document.querySelectorAll('video.video');

	let options = {
		rootMargin: '0px',
		threshold: 0.5,
	};

	let callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
		entries.forEach((entry) => {
			if (!entry.isIntersecting && entry.target instanceof HTMLVideoElement) {
				entry.target.pause();
			} else if (entry.isIntersecting && entry.target instanceof HTMLVideoElement) {
				entry.target.play();
			}
		});
	};
	let observer = new IntersectionObserver(callback, options);

	videos.forEach((elem) => observer.observe(elem));
</script>

<div class="container">
	<figure class="grid--container">
		<div class:list={['media--container', (fullWidth && 'grid--full') || 'media--9col']}>
			{
				type === 'picture' && (
					<>
						<a href={src}>
							<slot>
								<Picture
									src={src}
									widths={[200, 400, 800, 1600]}
									aspectRatio={aspectRatio}
									sizes="(max-width: 800px) 100vw, 800px, 1600px"
									alt={alt}
								/>
							</slot>
						</a>
					</>
				)
			}

			{
				type === 'video' && (
					<>
						<video class="video" width="100%" height="100%" src={_src} muted controls autoplay loop />
					</>
				)
			}
		</div>
		{alt && <figcaption>{alt}</figcaption>}
	</figure>
</div>
<style lang="scss">
	@import '../styles/_vars.scss';

	.container {
		margin: 3em 0;
	}

	figure {
		margin: 0;
	}

	.grid--container {
		display: grid;
		grid-template-columns: repeat(12, 1fr);
		gap: 20px;
	}

	.media--container {
		position: relative;
	}

	.media--9col {
		grid-column: 1 / span 9;
	}

	figcaption {
		grid-column: span 3;
		margin-top: auto;
		margin-bottom: -4px;
	}

	:global(.media--container *) {
		display: block;
	}

	:global(.media--container img) {
		width: 100%;
		height: auto;
	}

	@media (max-width: $screen-lg) {
		.grid--container {
			display: flex;
			flex-direction: column;
			gap: 8px;
			margin: 0;
		}

		.media--container {
			position: relative;
		}

		figcaption {
			max-width: 80%;
		}
	}

	@media (max-width: $screen-md) {
		figcaption {
			width: 100%;
		}
	}
</style>
