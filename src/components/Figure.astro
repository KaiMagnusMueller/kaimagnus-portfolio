---
import { Picture } from '@astrojs/image/components';

export interface Props {
	src?: string;
	alt?: string;
	aspectRatio?: `${number}:${number}`;
	widths?: string;
	sizes?: string;
	type?: 'picture' | 'video' | 'useCase';
	fullWidth?: boolean;
	loading?: 'eager' | 'lazy';
	captionHidden?: boolean;
}

const {
	src = 'https://slipsum.com/wp-content/themes/15zine/img/sam.png',
	alt = '',
	aspectRatio = '16:10',
	type = 'picture',
	fullWidth = false,
	loading = 'lazy',
	captionHidden = false,
} = Astro.props;

let _src = '';

if (type === 'video') {
	_src = import.meta.env.PUBLIC_APACHE_URL + src;
}
---

<script>
	const videos = document.querySelectorAll('video.video');

	let options = {
		rootMargin: '0px',
		threshold: 0.5,
	};

	let callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
		entries.forEach((entry) => {
			if (!entry.isIntersecting && entry.target instanceof HTMLVideoElement) {
				entry.target.pause();
			} else if (entry.isIntersecting && entry.target instanceof HTMLVideoElement) {
				entry.target.play();
			}
		});
	};
	let observer = new IntersectionObserver(callback, options);

	videos.forEach((elem) => observer.observe(elem));
</script>

<figure class="container grid--container full-width">
	<span class:list={['media--container', (fullWidth && 'grid--full') || 'media--9col']}>
		{
			type === 'picture' && (
				<>
					<a href={src}>
						<slot>
							<Picture
								src={src}
								widths={[200, 400, 800, 1766]}
								aspectRatio={aspectRatio}
								sizes="(max-width: 800px) 100vw, 800px, 1766px"
								alt={alt}
								loading={loading}
							/>
						</slot>
					</a>
				</>
			)
		}

		{
			type === 'video' && (
				<>
					<video
						title={alt}
						class="video"
						width="100%"
						height="100%"
						src={_src}
						muted
						controls
						autoplay
						loop
					/>
				</>
			)
		}
	</span>
	{alt && !captionHidden && <figcaption>{alt}</figcaption>}
</figure>

<style lang="scss">
	@import '../styles/_vars.scss';

	figure {
		margin: 2em 0;
		position: relative;
	}

	.grid--container {
		display: grid;
		grid-template-columns: repeat(12, 1fr);
		gap: 2rem;
	}

	.media--container {
		position: relative;
	}

	.media--9col {
		grid-column: 1 / span 9;
	}

	figcaption {
		grid-column: span 3;
		margin-top: auto;
		margin-bottom: -4px;
	}

	.grid--full + figcaption {
		grid-column: 10/-1;
		position: absolute;
		bottom: 0;
		right: 0;
		transform: translateY(100%);
		padding-top: 2rem;
	}

	:global(.media--container *) {
		display: block;
	}

	:global(.media--container img) {
		width: 100%;
		height: auto;
	}

	// fix first figures after headings having a too large margin-top
	:global(h1 + figure, .heading-wrapper + figure) {
		margin-top: 1rem;
	}

	@media (max-width: $screen-lg) {
		.grid--container {
			display: flex;
			flex-direction: column;
			gap: 8px;
		}

		.media--container {
			position: relative;
		}

		.grid--full + figcaption,
		figcaption {
			width: 100%;
			position: relative;
			transform: none;
			padding-top: 0;
		}
	}

	@media (max-width: $screen-md) {
		.figure {
			margin: 2.5em 0;
		}
	}
</style>
