---
import type { MarkdownHeading } from 'astro';

interface Props {
	headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<nav id="page-toc-container" aria-label="Table of contents">
	<ul>
		{
			headings.map((heading, index) => (
				<li>
					<a href={`#${heading.slug}`}>
						<div>
							{heading.text}
							<span>{heading.text}</span>
						</div>
					</a>
				</li>
			))
		}
	</ul>
</nav>

<script>
	// Only run TOC logic if screen is wide enough

	if (window.innerWidth >= 768) {
		let activeHeadings: string[] = [];

		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute('id');
					const tocLink = document.querySelector(`#page-toc-container a[href="#${id}"]`);

					if (entry.isIntersecting) {
						// Clear headings that are now above viewport
						activeHeadings = activeHeadings.filter((headingId) => {
							const element = document.getElementById(headingId);
							const isAbove = element?.getBoundingClientRect().top < 0;
							if (isAbove) {
								document
									.querySelector(`#page-toc-container a[href="#${headingId}"]`)
									?.classList.remove('active');
							}
							return !isAbove;
						});

						// Add new heading
						if (!activeHeadings.includes(id)) {
							activeHeadings.push(id);
						}
						tocLink?.classList.add('active');
					} else {
						activeHeadings = activeHeadings.filter((h) => h !== id);
						tocLink?.classList.remove('active');

						// If no headings are active, reactivate the last visible one
						if (activeHeadings.length === 0 && entry.target.getBoundingClientRect().top < 0) {
							activeHeadings.push(id);
							tocLink?.classList.add('active');
						}
					}
				});
			},
			{ root: null, rootMargin: '0px', threshold: 0.5 }
		);

		document.querySelectorAll('h1[id], h2[id], h3[id], h4[id]').forEach((heading) => {
			observer.observe(heading);
		});
	}
</script>

<style lang="scss" is:global>
	/* Keep your existing styles unchanged */
	@use '../styles/vars.scss';

	#page-toc-container {
		display: flex;
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		align-items: center;
		z-index: 999;
		width: clamp(1rem, 10vw, 10rem);

		&::before {
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			visibility: hidden;
			opacity: 0;
			transition: 0.2s all ease-in-out;
			background: linear-gradient(to left, var(--bg-color-elev-0) 35%, transparent);
			width: 500%;
			// max-width: 500px;
			height: 100%;
			pointer-events: none;
			content: '';
		}
	}

	#page-toc-container ul {
		display: flex;
		position: relative;
		left: 50%;
		flex-direction: column;
		justify-content: center;
		transform: translateX(-50%);
		padding: 1rem;
		list-style: none;
	}

	#page-toc-container a.active::after {
		opacity: 1;
	}

	#page-toc-container:has(ul:hover) {
		div {
			transform: translate(0);
		}

		div,
		span {
			visibility: visible;
		}

		span {
			opacity: 0.4;
		}

		li {
			position: relative;
			left: 0;
		}

		&::before {
			visibility: visible;
			opacity: 1;
		}

		a::after {
			opacity: 0.4;
		}

		a.active::after {
			opacity: 1;
		}
	}

	#page-toc-container a {
		display: grid;
		position: relative;
		grid-template-columns: 1fr;
		justify-content: end;
		align-items: center;
		transition: 0.1s all ease-out;
		border-radius: 999px;
		width: 1.75rem;
		height: 2rem;
		text-decoration: none;

		&::after {
			display: block;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			opacity: 0.2;
			z-index: 999;
			transition: 0.2s all ease-in-out;
			background: var(--text-color);
			width: 1rem;
			height: 2px;
			content: ' ';
		}

		div {
			transform: translate(0.5rem, 0);
			transition: 0.5s all cubic-bezier(0.165, 0.84, 0.44, 1);
			margin-inline-end: -0.5rem;
			color: transparent;
		}

		div,
		span {
			position: absolute;
			right: 0;
			grid-row: 1;
			grid-column: 1;
			visibility: hidden;
			padding-block: 0.5rem;
			padding: 0.5rem 1rem;
			padding-inline-end: 2.75rem;
			min-width: max-content;
			line-height: 1;
		}

		span {
			position: absolute;
			top: 0;
			left: 0;
			transform: translate(3px, 0);
			transform-origin: left center;
			opacity: 0;
			transition: 0.1s all ease-out;
			outline: 1px solid transparent;
			outline-offset: -1px;
			border-radius: 999px;
			background: none;
			pointer-events: none;
			color: var(--text-color);
		}

		&:hover {
			span {
				transform: translate(0, 0);
				opacity: 1;
				outline: 1px solid var(--card-border-color);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.0588235294);
				background: var(--bg-color-elev-1);
			}

			div {
				opacity: 1;
			}
		}
	}

	@media (max-width: vars.$screen-md) {
		#page-toc-container {
			display: none;
			top: 0;
			left: 50%;
			transform: translateX(-50%);
			z-index: 999;
			background: linear-gradient(180deg, var(--bg-color-elev-0) 40%, transparent);
			padding: 1rem 1rem 3rem;
			width: 100%;
		}

		#page-toc-container ul {
			flex-direction: row;
		}

		#page-toc-container a {
			width: 1.5rem;
			height: 2.5rem;

			&::after {
				width: 2px;
				height: 1rem;
			}

			& span {
				top: 100%;
				left: 50%;
				transform: scale(1) translateX(-50%);
				margin-inline-start: 0;
				margin-block-start: 0.5rem;
			}

			&:hover span {
				transform: scale(1) translateX(-50%);
			}
		}
	}
</style>
