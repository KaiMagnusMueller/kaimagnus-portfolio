---
import Posts from '@layouts/Posts.astro';
import { getHeadingsRender } from '@utils/getHeadingsRender';
import { getCollection } from 'astro:content';
import { undefined } from 'astro:schema';
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
	const entries = await getCollection('work');

	const headings = await getHeadingsRender(entries);

	return entries.map((entry, index) => ({
		params: { slug: entry.slug },
		props: { entry, headings: headings[index] },

	}));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry, headings } = Astro.props;
const { Content } = await entry.render();

const date = new Date(entry.data.datePublished).toLocaleDateString('en-US', { dateStyle: 'long' });


const startDate = entry.data.projectStartDate 
  ? new Date(entry.data.projectStartDate).getFullYear().toString()
  : '';
const endDate = entry.data.projectEndDate 
  ? new Date(entry.data.projectEndDate).getFullYear().toString()
  : '';


---


<Posts
	entryCollection={entry.collection}
	{...entry.data} {headings}>
	<header>
		<div class="header-inner-wrapper">
			<h1 id={entry.slug}>{entry.data.title}</h1>
			<span class="course-data color-text-low-contrast">
				<span class="sr-only">Tags:</span>
				{entry.data.tags.map((tag: string) => <span>{tag}</span>)}
				{
					entry.data.projectStartDate && (
						<span>
							<span class="sr-only">Project start:</span>
							<time datetime={startDate}>{startDate}</time>{entry.data.projectEndDate &&
								<span> – </span>
								<span class="sr-only">Project end:</span>
								<time datetime={endDate}>{endDate}</time>||
								<span class="sr-only">Project end:</span><span> – </span><span>ongoing</span>
								}
						</span>
					) || (
						<span class="sr-only">Date published:</span>
						<span><time datetime={new Date(entry.data.datePublished).toISOString()}>{date}</time></span>
						)
				}
			</span>
		</div>
	</header>
	<Content />
</Posts>

<style lang="scss"></style>
